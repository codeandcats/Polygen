type BaseValueType = string | number | boolean | undefined | null | void | {};

/**
 * Infers a tuple type for up to 26 values (add more here if ever needed).
 *
 * Example usage:
 * const ALL_SUITS = tuple('hearts', 'diamonds', 'spades', 'clubs');
 * type AllSuits = typeof ALL_SUITS; // same as: type AllSuits = ['hearts', 'diamonds', 'spades', 'clubs']
 * type Suit = AllSuits[number];  // same as: type Suit = 'hearts' | 'diamonds' | 'spades' | 'clubs';
 *
 */
// tslint:disable:max-line-length
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType, M extends BaseValueType, N extends BaseValueType, O extends BaseValueType, P extends BaseValueType, Q extends BaseValueType, R extends BaseValueType, S extends BaseValueType, T extends BaseValueType, U extends BaseValueType, V extends BaseValueType, W extends BaseValueType, X extends BaseValueType, Y extends BaseValueType, Z extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T, u: U, v: V, w: W, x: X, y: Y, z: Z): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType, M extends BaseValueType, N extends BaseValueType, O extends BaseValueType, P extends BaseValueType, Q extends BaseValueType, R extends BaseValueType, S extends BaseValueType, T extends BaseValueType, U extends BaseValueType, V extends BaseValueType, W extends BaseValueType, X extends BaseValueType, Y extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T, u: U, v: V, w: W, x: X, y: Y): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType, M extends BaseValueType, N extends BaseValueType, O extends BaseValueType, P extends BaseValueType, Q extends BaseValueType, R extends BaseValueType, S extends BaseValueType, T extends BaseValueType, U extends BaseValueType, V extends BaseValueType, W extends BaseValueType, X extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T, u: U, v: V, w: W, x: X): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType, M extends BaseValueType, N extends BaseValueType, O extends BaseValueType, P extends BaseValueType, Q extends BaseValueType, R extends BaseValueType, S extends BaseValueType, T extends BaseValueType, U extends BaseValueType, V extends BaseValueType, W extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T, u: U, v: V, w: W): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType, M extends BaseValueType, N extends BaseValueType, O extends BaseValueType, P extends BaseValueType, Q extends BaseValueType, R extends BaseValueType, S extends BaseValueType, T extends BaseValueType, U extends BaseValueType, V extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T, u: U, v: V): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType, M extends BaseValueType, N extends BaseValueType, O extends BaseValueType, P extends BaseValueType, Q extends BaseValueType, R extends BaseValueType, S extends BaseValueType, T extends BaseValueType, U extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T, u: U): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType, M extends BaseValueType, N extends BaseValueType, O extends BaseValueType, P extends BaseValueType, Q extends BaseValueType, R extends BaseValueType, S extends BaseValueType, T extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType, M extends BaseValueType, N extends BaseValueType, O extends BaseValueType, P extends BaseValueType, Q extends BaseValueType, R extends BaseValueType, S extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType, M extends BaseValueType, N extends BaseValueType, O extends BaseValueType, P extends BaseValueType, Q extends BaseValueType, R extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType, M extends BaseValueType, N extends BaseValueType, O extends BaseValueType, P extends BaseValueType, Q extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType, M extends BaseValueType, N extends BaseValueType, O extends BaseValueType, P extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType, M extends BaseValueType, N extends BaseValueType, O extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType, M extends BaseValueType, N extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N): [A, B, C, D, E, F, G, H, I, J, K, L, M, N];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType, M extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M): [A, B, C, D, E, F, G, H, I, J, K, L, M];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType, L extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L): [A, B, C, D, E, F, G, H, I, J, K, L];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType, K extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K): [A, B, C, D, E, F, G, H, I, J, K];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType, J extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J): [A, B, C, D, E, F, G, H, I, J];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType, I extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I): [A, B, C, D, E, F, G, H, I];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType, H extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H): [A, B, C, D, E, F, G, H];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType, G extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F, g: G): [A, B, C, D, E, F, G];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType, F extends BaseValueType>(a: A, b: B, c: C, d: D, e: E, f: F): [A, B, C, D, E, F];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType, E extends BaseValueType>(a: A, b: B, c: C, d: D, e: E): [A, B, C, D, E];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType, D extends BaseValueType>(a: A, b: B, c: C, d: D): [A, B, C, D];
export function tuple<A extends BaseValueType, B extends BaseValueType, C extends BaseValueType>(a: A, b: B, c: C): [A, B, C];
export function tuple<A extends BaseValueType, B extends BaseValueType>(a: A, b: B): [A, B];
export function tuple<A extends BaseValueType>(a: A): [A];
// tslint:enable:max-line-length

export function tuple(...args: any[]): any[] {
	return args;
}
